<?php

/**
 ***** Phone class(on /data_types/basic) test class.
 *
 *
 * Provide unit tests for the Phone class methods.
 * To access the report generated by these tests, type on the URL: '../phone_test'
 */

require_once("TestCase.php");

require_once(APPPATH."/data_types/basic/Phone.php");
require_once(APPPATH."/exception/PhoneException.php");

class Phone_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

/* Number tests */

    public function shouldInstantiateWithValid8Number(){

        $number = "98557898";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid number ".$number;

        $this->unit->run($number, $phone->getNumber(), $test_name, $notes);
    }

    public function shouldInstantiateWithValid9Number(){

        $number = "998557899";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid number ".$number;

        $this->unit->run($number, $phone->getNumber(), $test_name, $notes);
    }

    public function shouldInstantiateWithValid10Number(){

        $number = "6198557898";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid number ".$number;

        $this->unit->run($number, $phone->getNumber(), $test_name, $notes);
    }

    public function shouldInstantiateWithValid11Number(){

        $number = "62998557898";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid number ".$number;

        $this->unit->run($number, $phone->getNumber(), $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalid7LengthNumber(){

        $number = "8557898";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid number ".$number;

        $this->unit->run($phone, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalid12LengthNumber(){

        $number = "619855789812";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid number ".$number;

        $this->unit->run($phone, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNotNumberNumber(){

        $number = "6198asd876";

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid number ".$number;

        $this->unit->run($phone, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullNumber(){

        $number = NULL;

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid number ".$number;

        $this->unit->run($phone, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidFalseNumber(){

        $number = FALSE;

        $notes = "";
        try{
            $phone = new Phone($number);
        }catch(PhoneException $e){
            $phone = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid number ".$number;

        $this->unit->run($phone, "is_false", $test_name, $notes);
    }

}