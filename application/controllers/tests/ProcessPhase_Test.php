<?php

/**
 ***** ProcessPhase class(on /data_types/selection_process/phases) test class.
 *
 *
 * Provide unit tests for the SelectionProcess class hierarchy methods.
 * To access the report generated by these tests, type on the URL: '../process_settings_test'
 */

require_once("TestCase.php");
require_once(APPPATH."/constants/SelectionProcessConstants.php");

require_once(APPPATH."/data_types/selection_process/SelectionProcess.php");
require_once(APPPATH."/data_types/selection_process/RegularStudentProcess.php");
require_once(APPPATH."/data_types/selection_process/ProcessSettings.php");

require_once(APPPATH."/data_types/selection_process/phases/ProcessPhase.php");
require_once(APPPATH."/data_types/selection_process/phases/Homologation.php");
require_once(APPPATH."/data_types/selection_process/phases/WeightedPhase.php");
require_once(APPPATH."/data_types/selection_process/phases/PreProjectEvaluation.php");
require_once(APPPATH."/data_types/selection_process/phases/WrittenTest.php");
require_once(APPPATH."/data_types/selection_process/phases/OralTest.php");

require_once(APPPATH."/exception/SelectionProcessException.php");

class ProcessPhase_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

/* Phase name tests */


    public function shouldReturnHomologationName(){

        $phaseName = SelectionProcessConstants::HOMOLOGATION_PHASE;

        $notes = "";
        try{
            $phase = new Homologation();
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if return with the right Homologation phase name.";

        $this->unit->run($phaseName, $phase->getPhaseName(), $test_name, $notes);
    }

    public function shouldReturnPreProjectEvaluationName(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the right phase name.";

        $this->unit->run($phaseName, $phase->getPhaseName(), $test_name, $notes);
    }

    public function shouldReturnWrittenTestName(){

        $phaseName = SelectionProcessConstants::WRITTEN_TEST_PHASE;
        $weight = 1;

        $notes = "";
        try{
            $phase = new WrittenTest($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if return the right WrittenTest phase name.";

        $this->unit->run($phaseName, $phase->getPhaseName(), $test_name, $notes);
    }

    public function shouldReturnOralTestName(){

        $phaseName = SelectionProcessConstants::ORAL_TEST_PHASE;
        $weight = 1;

        $notes = "";
        try{
            $phase = new OralTest($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if return the right OralTest phase name.";

        $this->unit->run($phaseName, $phase->getPhaseName(), $test_name, $notes);
    }

/* Weight tests */

    public function shouldInstantiateValidMinWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the MIN_WEIGHT weight.";

        $this->unit->run($weight, $phase->getWeight(), $test_name, $notes);
    }

    public function shouldInstantiateValidMaxWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MAX_WEIGHT;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the MAX_WEIGHT weight.";

        $this->unit->run($weight, $phase->getWeight(), $test_name, $notes);
    }

    public function shouldInstantiateValidRandomWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = rand(WeightedPhase::MIN_WEIGHT, WeightedPhase::MAX_WEIGHT);

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the random weight ".$weight;

        $this->unit->run($weight, $phase->getWeight(), $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidLessThanMinWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT - 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidGreaterThanMaxWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MAX_WEIGHT + 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidNullWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = NULL;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the null weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidFalseWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = FALSE;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the FALSE weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidBlankWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = "";

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the blank weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidNotNumberWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = "peso";

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the not number weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidStringNumberWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = (string) WeightedPhase::MIN_WEIGHT - 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the invalid string number weight ".$weight;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldInstantiateValidStringNumberWeight(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = (string) WeightedPhase::MIN_WEIGHT + 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid string number weight ".$weight;

        $this->unit->run($weight, $phase->getWeight(), $test_name, $notes);
    }

/* Grade tests */

    public function shouldInstantiateValidMinGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = WeightedPhase::MIN_GRADE;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the MIN_GRADE grade.";

        $this->unit->run($grade, $phase->getGrade(), $test_name, $notes);
    }

    public function shouldInstantiateValidMaxGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = WeightedPhase::MIN_GRADE;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the MIN_GRADE grade.";

        $this->unit->run($grade, $phase->getGrade(), $test_name, $notes);
    }

    public function shouldInstantiateValidRandomGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = rand(WeightedPhase::MIN_GRADE, WeightedPhase::MAX_GRADE);

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the random grade ".$grade;

        $this->unit->run($grade, $phase->getGrade(), $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidLessThanMinGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = WeightedPhase::MIN_GRADE - 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidGreaterThanMaxGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = WeightedPhase::MAX_GRADE + 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidNullGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = NULL;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the null grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldInstantiateValidFalseGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = FALSE;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the FALSE grade ".$grade;

        $this->unit->run($grade, $phase->getGrade(), $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidBlankGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = "";

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the blank grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidNotNumberGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = "peso";

        $notes = "";
        try{

            $phase = new PreProjectEvaluation($weight, $grade);
            //exit;

        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the not number grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateInvalidStringNumberGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = (string) WeightedPhase::MIN_GRADE - 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the invalid string number grade ".$grade;

        $this->unit->run($phase, "is_false", $test_name, $notes);
    }

    public function shouldInstantiateValidStringNumberGrade(){

        $phaseName = SelectionProcessConstants::PRE_PROJECT_EVALUATION_PHASE;
        $weight = WeightedPhase::MIN_WEIGHT;
        $grade = (string) WeightedPhase::MIN_GRADE + 1;

        $notes = "";
        try{
            $phase = new PreProjectEvaluation($weight, $grade);
        }catch (SelectionProcessException $e){
            $phase = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid string number grade ".$grade;

        $this->unit->run($grade, $phase->getGrade(), $test_name, $notes);
    }
}