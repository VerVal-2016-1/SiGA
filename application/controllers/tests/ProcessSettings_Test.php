<?php

/**
 ***** SelectionProcess class(on /data_types/selection_process) test class.
 *
 *
 * Provide unit tests for the SelectionProcess class hierarchy methods.
 * To access the report generated by these tests, type on the URL: '../process_settings_test'
 */

require_once("TestCase.php");

require_once(APPPATH."/data_types/selection_process/SelectionProcess.php");
require_once(APPPATH."/data_types/selection_process/RegularStudentProcess.php");
require_once(APPPATH."/data_types/selection_process/ProcessSettings.php");
require_once(APPPATH."/exception/SelectionProcessException.php");

require_once(APPPATH."/data_types/selection_process/phases/ProcessPhase.php");
require_once(APPPATH."/data_types/selection_process/phases/Homologation.php");
require_once(APPPATH."/data_types/selection_process/phases/WeightedPhase.php");
require_once(APPPATH."/data_types/selection_process/phases/PreProjectEvaluation.php");
require_once(APPPATH."/data_types/selection_process/phases/WrittenTest.php");
require_once(APPPATH."/data_types/selection_process/phases/OralTest.php");

class ProcessSettings_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

/* Start date tests */
    public function shouldInstantiateWithValidStartDate(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid startDate ".$startDate;

        $this->unit->run($startDate, $processSettings->getFormattedStartDate(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidRandomStartDate(){

        // Just until 28 because all months have 28 days
        $randDay = rand(1, 28);
        $randMonth = rand(1, 12);

        $currentDate = date_parse_from_format("d/m/Y", date("d/m/Y"));
        $currentYear = $currentDate["year"];
        $randYear = rand($currentYear, $currentYear + 200);

        if(strlen((string) $randDay) == 1){
            $randDay = "0".$randDay;    
        }

        if(strlen((string) $randMonth) == 1){
            $randMonth = "0".$randMonth;
        }

        $startDate = $randDay."/".$randMonth."/".$randYear;
        $validYear = (string) $currentYear+201;
        $endDate = "16/04/".$validYear;

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid random startDate ".$startDate;

        $this->unit->run($startDate, $processSettings->getFormattedStartDate(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidNowStartDate(){

        $startDate = date("d/m/Y");
        $endDate = "16/04/2050";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with now as startDate ".$startDate;

        $this->unit->run($startDate, $processSettings->getFormattedStartDate(), $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidRandomStartDate(){

        $randDay = rand(32, PHP_INT_MAX);
        $randMonth = rand(13, PHP_INT_MAX);

        $currentDate = date_parse_from_format("d/m/Y", date("d/m/Y"));
        $currentYear = $currentDate["year"]; 
        $randYear = rand(PHP_INT_MAX + 1, $currentYear - 1);

        if(strlen((string) $randDay) == 1){
            $randDay = "0".$randDay;    
        }

        if(strlen((string) $randMonth) == 1){
            $randMonth = "0".$randMonth;
        }

        $startDate = $randDay."/".$randMonth."/".$randYear;
        $validYear = (string) $currentYear+1;
        $endDate = "16/04/".$validYear;

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid random startDate ".$startDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullStartDate(){

        $startDate = NULL;
        $endDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL startDate ".$startDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidBlankStartDate(){

        $startDate = "";
        $endDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid blank startDate ".$startDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidFalseStartDate(){

        $startDate = FALSE;
        $endDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid FALSE startDate ".$startDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNotNumberStartDate(){

        $startDate = "ab/cd/efgh";
        $endDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedStartDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NOT NUMBER startDate ".$startDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

/* End date tests */

    public function shouldInstantiateWithValidRandomEndDate(){

        // Just until 28 because all months have 28 days
        $randDay = rand(1, 28);
        $randMonth = rand(1, 12);

        $currentDate = date_parse_from_format("d/m/Y", date("d/m/Y"));
        $currentYear = $currentDate["year"];
        $randYear = rand($currentYear + 1, $currentYear + 200);

        if(strlen((string) $randDay) == 1){
            $randDay = "0".$randDay;    
        }

        if(strlen((string) $randMonth) == 1){
            $randMonth = "0".$randMonth;
        }

        $startDate = "16/04/".$currentYear;
        $endDate = $randDay."/".$randMonth."/".$randYear;

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid random endDate ".$endDate;

        $this->unit->run($endDate, $processSettings->getFormattedEndDate(), $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidRandomEndDate(){

        $randDay = rand(32, PHP_INT_MAX);
        $randMonth = rand(13, PHP_INT_MAX);

        $currentDate = date_parse_from_format("d/m/Y", date("d/m/Y"));
        $currentYear = $currentDate["year"]; 
        $randYear = rand(PHP_INT_MAX + 1, $currentYear - 1);

        if(strlen((string) $randDay) == 1){
            $randDay = "0".$randDay;    
        }

        if(strlen((string) $randMonth) == 1){
            $randMonth = "0".$randMonth;
        }

        $endDate = $randDay."/".$randMonth."/".$randYear;
        $startDate = "16/04/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid random endDate ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullEndDate(){

        $startDate = "16/04/2016";
        $endDate = NULL;

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL endDate ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidBlankEndDate(){

        $startDate = "16/04/2016";
        $endDate = "";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL endDate ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidFalseEndDate(){

        $startDate = "16/04/2016";
        $endDate = FALSE;

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL endDate ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNotNumberEndDate(){

        $startDate = "16/04/2016";
        $endDate = "a&/c*/2013";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL endDate ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNowEndDate(){

        // A Selection Process cannot be open and closed at the same day
        $startDate = date("d/m/Y");
        $endDate = date("d/m/Y");

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with now as start and end date ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidDateInterval(){

        // The end date cant be less than the start date
        $startDate = "16/08/2016";
        $endDate = "15/08/2016";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with end date less than start date ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidGreaterDateInterval(){

        // The end date cant be less than the start date
        $startDate = "16/08/2016";
        $endDate = "20/08/2015";

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $notes.="Data definida: ". $processSettings->getFormattedEndDate();
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with end date less than start date ".$endDate;

        $this->unit->run($processSettings, "is_false", $test_name, $notes);
    }

    public function shouldAddHomologationPhase(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = new Homologation();

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $processSettings->addPhase($phaseToAdd);
        }catch (SelectionProcessException $e){
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add Homologation phase";

        $this->unit->run($phaseToAdd, $processSettings->getPhases()[0], $test_name, $notes);
    }

    public function shouldAddPreProjectPhase(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = new PreProjectEvaluation(1);

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $processSettings->addPhase($phaseToAdd);
        }catch (SelectionProcessException $e){
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add PreProjectEvaluation phase";

        $this->unit->run($phaseToAdd, $processSettings->getPhases()[0], $test_name, $notes);
    }

    public function shouldAddWrittenTestPhase(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = new WrittenTest(1);

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $processSettings->addPhase($phaseToAdd);
        }catch (SelectionProcessException $e){
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add WrittenTest phase";

        $this->unit->run($phaseToAdd, $processSettings->getPhases()[0], $test_name, $notes);
    }

    public function shouldAddOralTestPhase(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = new OralTest(1);

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate);
            $processSettings->addPhase($phaseToAdd);
        }catch (SelectionProcessException $e){
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add OralTest phase";

        $this->unit->run($phaseToAdd, $processSettings->getPhases()[0], $test_name, $notes);
    }

    public function shouldAddMultiplePhases(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = array(
            new Homologation(),
            new OralTest(1),
            new PreProjectEvaluation(1)
        );

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate, $phaseToAdd);
        }catch (SelectionProcessException $e){
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add multiple phases";

        $this->unit->run($phaseToAdd, $processSettings->getPhases(), $test_name, $notes);
    }

    public function shouldNotAddNotPhaseObject(){

        $startDate = "16/03/2016";
        $endDate = "16/04/2016";

        $phaseToAdd = array(
            new Homologation(),
            new OralTest(1),
            array("test")
        );

        $notes = "";
        try{
            $processSettings = new ProcessSettings($startDate, $endDate, $phaseToAdd);
        }catch (SelectionProcessException $e){
            $processSettings = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if add multiple phases";

        $this->unit->run($processSettings, "is_false" , $test_name, $notes);
    }

}
